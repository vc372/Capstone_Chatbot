# -*- coding: utf-8 -*-
"""NLP_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cPdAT0qs9_NSBb5nPyUdHnbzddc3WUtF
"""

#Imports
import numpy as np
import torch
import Preprocessing_nn_model.py
import Loads_NN_Model.py

#Prediction Function with model and message as input
def predict_with_model(message, path_model, path_state_dict, path_vectorizer):
  device = device = "cuda" if torch.cuda.is_available() else "cpu"
  #Preprocessing of Input
  X_no_stopwards = Preprocessing_nn_model.preprocess(message)
  model,vectorizer = Loads_NN_Model.load_model(path_model, path_state_dict, path_vectorizer)

  #Input into model and returns classifciation
  test_features = vectorizer.transform(X_no_stopwords)
  test_features_tensor = csr2tensor(test_features).to(device)
  output = model(test_features_tensor) 
  y_pred = torch.argmax(output).item()

  y_test_predict = []
  for a in output.detach().numpy():
    y_test_predict.append(np.argmax(a, axis = 0))

  category = ''
  if y_test_predict[0] == 0:
    category = 'anxiety'
  if y_test_predict[0] == 1:
    category = 'relationships'
  if y_test_predict[0] == 2:
    category = 'self-esteem'

  return category