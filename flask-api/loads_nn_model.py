# -*- coding: utf-8 -*-
"""Loads_NN_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z_J8G6xvHBU_NHnS93PSrbRkBTm33zQH
"""

#Imports
import numpy as np
import pandas as pd
import string
import requests
import re

import torch
import pickle
from torch import nn

#NN Class
class NeuralNetwork(nn.Module):
    size = 0
    def __init__(self, size):
        super().__init__()
        
        self.size = size
        self.softmax = nn.LogSoftmax()
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(self.size, int(self.size*2/3)),
            nn.Dropout(p=0.5),
            nn.ReLU(),
            nn.Linear(int(self.size*2/3), 3)
        )
        
        

    def forward(self, x):
        logits = self.linear_relu_stack(x)
        return logits

#loads model
def anything(input):
  return input

def load_model(path_model, path_state_dict, path_vectorizer):
  model = torch.load(path, map_location=torch.device('cpu'))
  model.load_state_dict(torch.load(path_state_dict, map_location=torch.device('cpu')))

  vectorizer_garbge = open(path_vectorizer,'rb')
  vectorizer= pickle.load(vectorizer_garbge)
  return model,vectorizer